# Generated by Django 2.1.3 on 2019-01-16 17:04

import datetime
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import myutils.modelextra.myfields
import researchapp.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Authorship',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', myutils.modelextra.myfields.CreationDateTimeField(blank=True, default=datetime.datetime.now, editable=False, help_text='Do not modify. The time this record was firstly created.', verbose_name='created')),
                ('updated_at', myutils.modelextra.myfields.ModificationDateTimeField(blank=True, default=datetime.datetime.now, editable=False, help_text='No need to edit: automatically updated each time the record is saved.', verbose_name='modified')),
                ('order', models.IntegerField(blank=True, null=True, verbose_name='Order number')),
            ],
            options={
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='GenericType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', myutils.modelextra.myfields.CreationDateTimeField(blank=True, default=datetime.datetime.now, help_text='The time this record was firstly created. Do not modify.', verbose_name='created on date')),
                ('updated_at', myutils.modelextra.myfields.ModificationDateTimeField(blank=True, default=datetime.datetime.now, help_text='Automatically updated each time the record is saved.', verbose_name='modified on date')),
                ('editedrecord', models.BooleanField(default=False, help_text='Tick to indicate that this record has been finalized', verbose_name='edited record?')),
                ('review', models.BooleanField(default=False, help_text='Tick to indicate that this record is under review by the editorial team', verbose_name='review')),
                ('internal_notes', models.TextField(blank=True, verbose_name='internal_notes')),
                ('name', models.CharField(max_length=765)),
                ('description', models.TextField(blank=True)),
                ('order', models.IntegerField(blank=True, null=True, verbose_name='Order number')),
                ('created_by', models.ForeignKey(blank=True, help_text='No need to edit: automatically set when saving', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='created_generictype', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, help_text='No need to edit: automatically set when saving', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='updated_generictype', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Generic types for organizing Items',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Item',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', myutils.modelextra.myfields.CreationDateTimeField(blank=True, default=datetime.datetime.now, help_text='The time this record was firstly created. Do not modify.', verbose_name='created on date')),
                ('updated_at', myutils.modelextra.myfields.ModificationDateTimeField(blank=True, default=datetime.datetime.now, help_text='Automatically updated each time the record is saved.', verbose_name='modified on date')),
                ('editedrecord', models.BooleanField(default=False, help_text='Tick to indicate that this record has been finalized', verbose_name='edited record?')),
                ('review', models.BooleanField(default=False, help_text='Tick to indicate that this record is under review by the editorial team', verbose_name='review')),
                ('internal_notes', models.TextField(blank=True, verbose_name='internal_notes')),
                ('urlstub', models.CharField(help_text='No spaces please', max_length=255, verbose_name='url stub')),
                ('short_title', models.CharField(max_length=255, verbose_name='short description')),
                ('title', models.CharField(max_length=255, verbose_name='title')),
                ('description', models.TextField(blank=True, null=True, verbose_name='description (html welcome!)')),
                ('embedcode1', models.TextField(blank=True, null=True, verbose_name='embedcode1 (eg video, pictures..)')),
                ('embedcode2', models.TextField(blank=True, null=True, verbose_name='embedcode2')),
                ('img', models.FileField(blank=True, help_text='upload an image (should be of pre-determined size!)', upload_to=researchapp.models.item_image_file_name, verbose_name='Image')),
                ('date', models.DateField(blank=True, help_text='(day will be stripped from public interface)', null=True, verbose_name='date')),
                ('isactive', models.BooleanField(default=False, help_text='This record will be marked as active in the public interface', verbose_name='currently being worked on?')),
                ('url1', models.URLField(blank=True, null=True, verbose_name='url1')),
                ('url1name', models.CharField(blank=True, max_length=200, null=True, verbose_name='url1 name')),
                ('url2', models.URLField(blank=True, null=True, verbose_name='url2')),
                ('url2name', models.CharField(blank=True, max_length=200, null=True, verbose_name='url2 name')),
                ('url3', models.URLField(blank=True, null=True, verbose_name='url3')),
                ('url3name', models.CharField(blank=True, max_length=200, null=True, verbose_name='url3 name')),
                ('mp3url', models.URLField(blank=True, null=True, verbose_name='url of mp3')),
                ('mp3name', models.CharField(blank=True, default='Download MP3', max_length=200, null=True, verbose_name='mp3 name')),
                ('extrainfo', models.CharField(blank=True, max_length=255, null=True, verbose_name='extra info?')),
                ('atype', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='researchapp.GenericType', verbose_name='generic type of object')),
                ('created_by', models.ForeignKey(blank=True, help_text='No need to edit: automatically set when saving', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='created_item', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, help_text='No need to edit: automatically set when saving', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='updated_item', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', myutils.modelextra.myfields.CreationDateTimeField(blank=True, default=datetime.datetime.now, help_text='The time this record was firstly created. Do not modify.', verbose_name='created on date')),
                ('updated_at', myutils.modelextra.myfields.ModificationDateTimeField(blank=True, default=datetime.datetime.now, help_text='Automatically updated each time the record is saved.', verbose_name='modified on date')),
                ('editedrecord', models.BooleanField(default=False, help_text='Tick to indicate that this record has been finalized', verbose_name='edited record?')),
                ('review', models.BooleanField(default=False, help_text='Tick to indicate that this record is under review by the editorial team', verbose_name='review')),
                ('internal_notes', models.TextField(blank=True, verbose_name='internal_notes')),
                ('name', models.CharField(blank=True, max_length=255, null=True, verbose_name='Name')),
                ('surname', models.CharField(blank=True, max_length=255, null=True, verbose_name='Surname')),
                ('institution', models.CharField(blank=True, max_length=255, null=True, verbose_name='Institution')),
                ('created_by', models.ForeignKey(blank=True, help_text='No need to edit: automatically set when saving', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='created_person', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, help_text='No need to edit: automatically set when saving', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='updated_person', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['surname'],
            },
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', myutils.modelextra.myfields.CreationDateTimeField(blank=True, default=datetime.datetime.now, help_text='The time this record was firstly created. Do not modify.', verbose_name='created on date')),
                ('updated_at', myutils.modelextra.myfields.ModificationDateTimeField(blank=True, default=datetime.datetime.now, help_text='Automatically updated each time the record is saved.', verbose_name='modified on date')),
                ('editedrecord', models.BooleanField(default=False, help_text='Tick to indicate that this record has been finalized', verbose_name='edited record?')),
                ('review', models.BooleanField(default=False, help_text='Tick to indicate that this record is under review by the editorial team', verbose_name='review')),
                ('internal_notes', models.TextField(blank=True, verbose_name='internal_notes')),
                ('urlstub', models.CharField(help_text='No spaces please', max_length=255, verbose_name='url stub')),
                ('short_title', models.CharField(max_length=255, verbose_name='Short description')),
                ('title', models.CharField(max_length=255, verbose_name='Title')),
                ('description', models.TextField(blank=True, null=True, verbose_name='description (html welcome!)')),
                ('myrole', models.TextField(blank=True, null=True, verbose_name='role in the project (html welcome!)')),
                ('embedcode1', models.TextField(blank=True, null=True, verbose_name='embedcode1 (eg video, pictures..)')),
                ('embedcode2', models.TextField(blank=True, null=True, verbose_name='embedcode2')),
                ('img', models.FileField(blank=True, help_text='upload an image to be used as an icon (should be of pre-determined size!)', upload_to=researchapp.models.project_image_file_name, verbose_name='Icon')),
                ('datefrom', models.DateField(blank=True, help_text='(day will be stripped from public interface)', null=True, verbose_name='date from')),
                ('dateto', models.DateField(blank=True, help_text='(day will be stripped from public interface)', null=True, verbose_name='date to')),
                ('isactive', models.BooleanField(default=False, help_text='This record will be marked as active in the public interface', verbose_name='currently active')),
                ('url1', models.URLField(blank=True, null=True, verbose_name='url1')),
                ('url1name', models.CharField(blank=True, max_length=200, null=True, verbose_name='url1 name')),
                ('url2', models.URLField(blank=True, null=True, verbose_name='url2')),
                ('url2name', models.CharField(blank=True, max_length=200, null=True, verbose_name='url2 name')),
                ('url3', models.URLField(blank=True, null=True, verbose_name='url3')),
                ('url3name', models.CharField(blank=True, max_length=200, null=True, verbose_name='url3 name')),
                ('extrainfo', models.CharField(blank=True, max_length=255, null=True, verbose_name='extra info')),
                ('created_by', models.ForeignKey(blank=True, help_text='No need to edit: automatically set when saving', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='created_project', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-dateto'],
            },
        ),
        migrations.CreateModel(
            name='Publication',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', myutils.modelextra.myfields.CreationDateTimeField(blank=True, default=datetime.datetime.now, help_text='The time this record was firstly created. Do not modify.', verbose_name='created on date')),
                ('updated_at', myutils.modelextra.myfields.ModificationDateTimeField(blank=True, default=datetime.datetime.now, help_text='Automatically updated each time the record is saved.', verbose_name='modified on date')),
                ('editedrecord', models.BooleanField(default=False, help_text='Tick to indicate that this record has been finalized', verbose_name='edited record?')),
                ('review', models.BooleanField(default=False, help_text='Tick to indicate that this record is under review by the editorial team', verbose_name='review')),
                ('internal_notes', models.TextField(blank=True, verbose_name='internal_notes')),
                ('title', models.CharField(max_length=255, verbose_name='title')),
                ('journal', models.CharField(blank=True, help_text='(insert issue N and other descriptors here for now)', max_length=255, null=True, verbose_name='journal')),
                ('conference', models.CharField(blank=True, max_length=255, null=True, verbose_name='conference')),
                ('conferenceurl', models.URLField(blank=True, null=True, verbose_name='url of the conference')),
                ('abstract', models.TextField(blank=True, null=True, verbose_name='abstract')),
                ('pubplace', models.CharField(blank=True, max_length=255, null=True, verbose_name='publication place')),
                ('pubdate', models.DateField(blank=True, help_text='(day will be stripped from public interface)', null=True, verbose_name='publication date')),
                ('isactive', models.BooleanField(default=False, help_text='This record will be marked as currenlty being worked on in the public interface', verbose_name='currently being worked on?')),
                ('isforthcoming', models.BooleanField(default=False, help_text='If True, please set the date to a future point so that the pub stays on top of the list!', verbose_name='forthcoming?')),
                ('isspeaking', models.BooleanField(default=False, help_text='Means that this pub-item involves a talk component on my side', verbose_name='speaking?')),
                ('url1', models.URLField(blank=True, null=True, verbose_name='url1')),
                ('url1name', models.CharField(blank=True, max_length=200, null=True, verbose_name='url1 name')),
                ('url2', models.URLField(blank=True, null=True, verbose_name='url2')),
                ('url2name', models.CharField(blank=True, max_length=200, null=True, verbose_name='url2 name')),
                ('url3', models.URLField(blank=True, null=True, verbose_name='url3')),
                ('url3name', models.CharField(blank=True, max_length=200, null=True, verbose_name='url3 name')),
                ('extrainfo', models.CharField(blank=True, max_length=255, null=True, verbose_name='extra info?')),
                ('embedcode1', models.TextField(blank=True, null=True, verbose_name='embedcode1 (eg video, pictures..)')),
                ('authors', models.ManyToManyField(related_name='authored', through='researchapp.Authorship', to='researchapp.Person', verbose_name='authors')),
                ('created_by', models.ForeignKey(blank=True, help_text='No need to edit: automatically set when saving', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='created_publication', to=settings.AUTH_USER_MODEL)),
                ('project', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='researchapp.Project', verbose_name='related to project')),
            ],
            options={
                'ordering': ['-pubdate'],
            },
        ),
        migrations.CreateModel(
            name='PubType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', myutils.modelextra.myfields.CreationDateTimeField(blank=True, default=datetime.datetime.now, help_text='The time this record was firstly created. Do not modify.', verbose_name='created on date')),
                ('updated_at', myutils.modelextra.myfields.ModificationDateTimeField(blank=True, default=datetime.datetime.now, help_text='Automatically updated each time the record is saved.', verbose_name='modified on date')),
                ('editedrecord', models.BooleanField(default=False, help_text='Tick to indicate that this record has been finalized', verbose_name='edited record?')),
                ('review', models.BooleanField(default=False, help_text='Tick to indicate that this record is under review by the editorial team', verbose_name='review')),
                ('internal_notes', models.TextField(blank=True, verbose_name='internal_notes')),
                ('name', models.CharField(max_length=765)),
                ('description', models.TextField(blank=True)),
                ('order', models.IntegerField(blank=True, null=True, verbose_name='Order number')),
                ('created_by', models.ForeignKey(blank=True, help_text='No need to edit: automatically set when saving', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='created_pubtype', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Publication types',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='PubTypeGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', myutils.modelextra.myfields.CreationDateTimeField(blank=True, default=datetime.datetime.now, help_text='The time this record was firstly created. Do not modify.', verbose_name='created on date')),
                ('updated_at', myutils.modelextra.myfields.ModificationDateTimeField(blank=True, default=datetime.datetime.now, help_text='Automatically updated each time the record is saved.', verbose_name='modified on date')),
                ('editedrecord', models.BooleanField(default=False, help_text='Tick to indicate that this record has been finalized', verbose_name='edited record?')),
                ('review', models.BooleanField(default=False, help_text='Tick to indicate that this record is under review by the editorial team', verbose_name='review')),
                ('internal_notes', models.TextField(blank=True, verbose_name='internal_notes')),
                ('name', models.CharField(max_length=765)),
                ('description', models.TextField(blank=True)),
                ('order', models.IntegerField(blank=True, null=True, verbose_name='Order number')),
                ('created_by', models.ForeignKey(blank=True, help_text='No need to edit: automatically set when saving', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='created_pubtypegroup', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, help_text='No need to edit: automatically set when saving', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='updated_pubtypegroup', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Publication types Groups [for display purposes]',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', myutils.modelextra.myfields.CreationDateTimeField(blank=True, default=datetime.datetime.now, help_text='The time this record was firstly created. Do not modify.', verbose_name='created on date')),
                ('updated_at', myutils.modelextra.myfields.ModificationDateTimeField(blank=True, default=datetime.datetime.now, help_text='Automatically updated each time the record is saved.', verbose_name='modified on date')),
                ('editedrecord', models.BooleanField(default=False, help_text='Tick to indicate that this record has been finalized', verbose_name='edited record?')),
                ('review', models.BooleanField(default=False, help_text='Tick to indicate that this record is under review by the editorial team', verbose_name='review')),
                ('internal_notes', models.TextField(blank=True, verbose_name='internal_notes')),
                ('name', models.CharField(max_length=765)),
                ('description', models.TextField(blank=True)),
                ('created_by', models.ForeignKey(blank=True, help_text='No need to edit: automatically set when saving', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='created_tag', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, help_text='No need to edit: automatically set when saving', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='updated_tag', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Tags',
                'ordering': ['name'],
            },
        ),
        migrations.AddField(
            model_name='pubtype',
            name='groupfk',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='researchapp.PubTypeGroup', verbose_name='Normalized grouping, used for visual display'),
        ),
        migrations.AddField(
            model_name='pubtype',
            name='updated_by',
            field=models.ForeignKey(blank=True, help_text='No need to edit: automatically set when saving', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='updated_pubtype', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='publication',
            name='pubtype',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='researchapp.PubType', verbose_name='type of publication'),
        ),
        migrations.AddField(
            model_name='publication',
            name='updated_by',
            field=models.ForeignKey(blank=True, help_text='No need to edit: automatically set when saving', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='updated_publication', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='project',
            name='tags',
            field=models.ManyToManyField(blank=True, related_name='projects', to='researchapp.Tag', verbose_name='tags'),
        ),
        migrations.AddField(
            model_name='project',
            name='updated_by',
            field=models.ForeignKey(blank=True, help_text='No need to edit: automatically set when saving', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='updated_project', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='authorship',
            name='person',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='researchapp.Person'),
        ),
        migrations.AddField(
            model_name='authorship',
            name='publication',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='researchapp.Publication'),
        ),
    ]
